{"version":3,"file":"js/176.6627d39c.js","mappings":"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","sources":["webpack://elsaify/./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        // const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (occupiedEntry !== undefined) {\n            data = occupiedEntry.content + data;\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n            return e.substring(path.length + 1);\n        });\n        return { files: names };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        return this._copy(options, true);\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return;\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","async","undefined","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","static","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","objectStore","req","indexName","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","entry","dbRequest","Error","data","content","doRecursive","recursive","occupiedEntry","type","encoding","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","now","Date","pathObj","folder","size","ctime","mtime","uri","entries","dbIndexRequest","IDBKeyRange","only","depth","match","fullPath","readDirResult","readdir","files","entryPath","entryObj","stat","deleteFile","rmdir","names","map","e","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","readFile","writeFile","contents","filename","_debug"],"sourceRoot":""}